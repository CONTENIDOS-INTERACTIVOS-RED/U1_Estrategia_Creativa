{"remainingRequest":"/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/src/views/curso/Tema3.vue?vue&type=template&id=621189da&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/src/views/curso/Tema3.vue","mtime":1735592523610},{"path":"/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estrategia_Creativa/U1_Estrategia_Creativa/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}